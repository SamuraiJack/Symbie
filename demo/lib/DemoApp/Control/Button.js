Class('DemoApp.Control.Button', {
    
    xtype : 'demoapp-control-button',
    
    isa : Ext.Container,
    
    use : 'DemoApp.Template.Base',    
    
    has : {
        
        text        : ' - button text -',
        
        cls         : 'demoapp-control-button-wrapper',
        
        iconCls     : '',
        
        slots       : true,
        
        dispatchTo  : null,
        
        template    : function () {
            return new DemoApp.Template.Base({
                /*tj
                    [%\ this.a(dispatchTo) %]            
                        
                        <div class="demoapp-control-button-imageholder [% iconCls %]">
                        </div>
                        
                        [% text %]
                    </a>
                tj*/

                /* GENERATED BY SHOTENJIN.JOOSED HELPER, DO NOT MODIFY DIRECTLY */
                sources : '[%\\ this.a(dispatchTo) %]\n<div class="demoapp-control-button-imageholder [% iconCls %]">\n</div>\n[% text %]\n</a>'
            })
        }
    },
    
    
    after : {
        onRender : function () {
            
            this.el.update(this.template.render({ 
                dispatchTo  : this.dispatchTo,
                iconCls     : this.iconCls,
                text        : this.text
            }))
        }
    }

})



//declare( 'Ext::ux::widgets::Button', function (use, checkState, __PACKAGE__){
//
////    use(['Ext::ux::layout::Thumbnail', 'Ext::ux::widgets::DataViewContainer', 'Ext::ux::element::Background'],function(){
//	
//	var override = {
//		buttonSelector : '.x-imagebutton_placeholder',
//		
//		template : new Ext.Template('<div><div class="x-imagebutton_placeholder">{0}</div></div>'),
//		
//		displayPath : undefined,
//		
//		initComponent : function (){
//			Ext.ux.widgets.myButton.superclass.initComponent.call(this);
//			
//			if (this.displayPath) this.setHandler(this.dispatchHandler, this);
//		},
//		
//
//		dispatchHandler : function (){
//			Catalyst.dispatch(this.displayPath);
//		},
//		
//	    autoWidth : function(){
//	        if(this.el){
////	            this.el.setWidth("auto");
////	            if(Ext.isIE7 && Ext.isStrict){
////	                var ib = this.el.child(this.buttonSelector);
////	                if(ib && ib.getWidth() > 20){
////	                    ib.clip();
////	                    ib.setWidth(Ext.util.TextMetrics.measure(ib, this.text).width+ib.getFrameWidth('lr'));
////	                }
////	            }
//	            if(this.minWidth){
//	                if(this.el.getWidth() < this.minWidth){
//	                    this.el.setWidth(this.minWidth);
//	                }
//	            }
//	        }
//	    },
//	    
//	    setText : function(text){
//	        this.text = text;
//	        if(this.el){
//	            this.el.child(".x-imagebutton_placeholder").update(text);
//	        }
//	        this.autoWidth();
//	    }
//		
//	};
//	
//	Ext.ux.widgets.myButton = Ext.extend(Ext.Button, override);	
//	Ext.reg('mybutton', Ext.ux.widgets.myButton);
//	
//	Ext.ux.widgets.myToolBarButton = Ext.extend(Ext.Toolbar.Button, override);	
//	Ext.reg('mytoolbarbutton', Ext.ux.widgets.myButton);
//	
//	
//	Ext.ux.widgets.Button = Ext.extend(Ext.Container, {
//		autoEl : 'div',
//		
//		constructor : function (config){
//			config.xtype = 'mybutton';
//			
//			this.items = [ config ];
//			
//			Ext.ux.widgets.Button.superclass.constructor.call(this);
//		}
//	});
//	Ext.reg('imagebutton', Ext.ux.widgets.Button);
//		
////    }); //eof use
//
//}); //eof declare